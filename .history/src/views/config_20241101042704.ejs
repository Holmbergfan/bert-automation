<!-- src/views/config.ejs -->

<div class="container mt-4">
  <h1 class="mb-4">TS3 Bot Configuration</h1>
  <div class="row">
    <!-- Control Bot Card -->
    <div class="col-md-4 mb-4">
      <div class="card">
        <div class="card-header bg-success text-white">
          Control Bot
        </div>
        <div class="card-body">
          <p>Status: <span id="bot-status">Loading...</span></p>
          <p>Current Channel: <span id="bot-channel">Loading...</span></p>
        </div>
        <div class="card-footer">
          <button id="connect-btn" class="btn btn-primary me-2">Connect Bot</button>
          <button id="disconnect-btn" class="btn btn-danger">Disconnect Bot</button>
        </div>
        <form id="assign-admin-form">
          <div class="mb-3">
            <label for="queryLoginName" class="form-label">Query Login Name:</label>
            <input type="text" id="queryLoginName" class="form-control" required />
          </div>
          <div class="mb-3">
            <label for="queryLoginPassword" class="form-label">Query Login Password:</label>
            <input type="password" id="queryLoginPassword" class="form-control" required />
          </div>
          <button type="submit" class="btn btn-primary">Assign Server Admin</button>
        </form>
      </div>
      
    </div>

    <!-- Update Bot Settings Card -->
    <div class="col-md-4 mb-4">
      <div class="card">
        <div class="card-header bg-warning text-dark">
           Settings
        </div>
        <div class="card-body">
          <form id="bot-settings-form">
            <div class="mb-3">
              <label for="ts3Host" class="form-label">TS3 Host:</label>
              <input type="text" id="ts3Host" class="form-control" value="<%= ts3Host %>" required />
            </div>
            <div class="mb-3">
              <label for="ts3Port" class="form-label">TS3 Port:</label>
              <input type="number" id="ts3Port" class="form-control" value="<%= ts3Port %>" required />
            </div>
            <div class="mb-3">
              <label for="ts3Username" class="form-label">TS3 Username:</label>
              <input type="text" id="ts3Username" class="form-control" value="<%= ts3Username %>" required />
            </div>
            <div class="mb-3">
              <label for="ts3Password" class="form-label">TS3 Password:</label>
              <input type="password" id="ts3Password" class="form-control" value="<%= ts3Password %>" required />
            </div>
            <div class="mb-3">
              <label for="ts3Nickname" class="form-label">Bot Nickname:</label>
              <input type="text" id="ts3Nickname" class="form-control" value="<%= ts3Nickname %>" required />
            </div>
            <div class="mb-3">
              <label for="ts3ServerId" class="form-label">Server ID:</label>
              <input type="number" id="ts3ServerId" class="form-control" value="<%= ts3ServerId %>" required />
            </div>
            <div class="mb-3">
              <label for="ts3ChannelId" class="form-label">Channel ID to Join:</label>
              <input type="number" id="ts3ChannelId" class="form-control" value="<%= ts3ChannelId %>" required />
            </div>
            <!-- Add more fields as needed -->
            <button type="submit" class="btn btn-secondary w-100" id="update-settings-btn" disabled>Update Settings</button>
          </form>
          <div id="settings-feedback" class="mt-3"></div>
        </div>
      </div>
    </div>

    <!-- Connected Users Card -->
    <div class="col-md-4 mb-4">
      <div class="card">
        <div class="card-header bg-dark text-white">
          Connected TeamSpeak Users
        </div>
        <div class="card-body">
          <div id="connected-users">
            <p>Loading connected users...</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<%- include('partials/footer') %>

<script>
  $(document).ready(function() {
    const BOT_API_URL = 'http://localhost:3002'; // Ensure this matches your bot's API port
    const BOT_API_KEY = '332036edf6199a0c3695b50c2b562e0c06725015c823c374ada16c2e8a51a1bffe2c12bfc320ef9543b13f367204d5b4be699cebe4cddcdc0b88cfd4d51a24c7'; // Replace with your actual Bot API Key

    // Helper Function to Capitalize First Letter
    function capitalizeFirstLetter(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    }

    // Function to fetch bot status
    function fetchBotStatus() {
      console.log('Fetching bot status...');
      $.ajax({
        url: `${BOT_API_URL}/status`,
        method: 'GET',
        headers: {
          'x-api-key': BOT_API_KEY
        },
        success: function(data) {
          console.log('Bot status:', data);
          $('#bot-status').text(capitalizeFirstLetter(data.status))
            .css('color', data.status === 'online' ? 'green' : 'red');
          $('#bot-channel').text(data.channel ? data.channel : 'N/A');
          
          // Enable the Update Settings button if the bot is NOT online
          // Disable only when the bot is online
          $('#update-settings-btn').prop('disabled', data.status === 'online');
        },
        error: function(xhr) {
          console.log('Error fetching bot status');
          $('#bot-status').text('Error').css('color', 'orange');
          $('#bot-channel').text('Error');
          
          // Enable the Update Settings button since the status couldn't be fetched
          // This allows users to attempt reconnection or update settings in case of an error
          $('#update-settings-btn').prop('disabled', false);
        }
      });
    }

    // Function to fetch connected users
    function fetchConnectedUsers() {
      $.ajax({
        url: `${BOT_API_URL}/status`,
        method: 'GET',
        headers: {
          'x-api-key': BOT_API_KEY
        },
        success: function(data) {
          if (data.status === 'online' && data.clients) {
            let usersHtml = '<ul class="list-group">';
            data.clients.forEach(user => {
              usersHtml += `<li class="list-group-item d-flex justify-content-between align-items-center">
                              ${user.nickname} (ID: ${user.id})
                              <span>
                                <button class="btn btn-sm btn-warning me-2 kick-user-btn" data-user-id="${user.id}">Kick</button>
                                <button class="btn btn-sm btn-danger ban-user-btn" data-user-id="${user.id}">Ban</button>
                              </span>
                            </li>`;
            });
            usersHtml += '</ul>';
            $('#connected-users').html(usersHtml);
          } else {
            $('#connected-users').html('<p>Bot is offline or no users connected.</p>');
          }
        },
        error: function() {
          $('#connected-users').html('<p>Error fetching connected users.</p>');
        }
      });
    }

    // Initial fetch
    fetchBotStatus();
    fetchConnectedUsers();
    // Refresh every 10 seconds
    setInterval(fetchBotStatus, 10000);
    setInterval(fetchConnectedUsers, 10000);

    // Connect Bot
    $('#connect-btn').click(function() {
      $.ajax({
        url: `${BOT_API_URL}/command`,
        method: 'POST',
        headers: {
          'x-api-key': BOT_API_KEY,
          'Content-Type': 'application/json'
        },
        data: JSON.stringify({ command: 'connect' }),
        success: function(data) {
          alert(data.message);
          fetchBotStatus();
          fetchConnectedUsers();
        },
        error: function(xhr) {
          let errorMessage = 'Failed to send command.';
          if (xhr.responseJSON && xhr.responseJSON.message) {
            errorMessage = xhr.responseJSON.message;
          } else if (xhr.responseText) {
            errorMessage = xhr.responseText;
          }
          alert(errorMessage);
        }
      });
    });

    // Disconnect Bot
    $('#disconnect-btn').click(function() {
      $.ajax({
        url: `${BOT_API_URL}/command`,
        method: 'POST',
        headers: {
          'x-api-key': BOT_API_KEY,
          'Content-Type': 'application/json'
        },
        data: JSON.stringify({ command: 'disconnect' }),
        success: function(data) {
          alert(data.message);
          fetchBotStatus();
          fetchConnectedUsers();
        },
        error: function(xhr) {
          let errorMessage = 'Failed to send command.';
          if (xhr.responseJSON && xhr.responseJSON.message) {
            errorMessage = xhr.responseJSON.message;
          } else if (xhr.responseText) {
            errorMessage = xhr.responseText;
          }
          alert(errorMessage);
        }
      });
    });

    // Update Bot Settings
    $('#bot-settings-form').submit(function(e) {
      e.preventDefault();

      const settings = {
        host: $('#ts3Host').val().trim(),
        port: parseInt($('#ts3Port').val().trim()),
        username: $('#ts3Username').val().trim(),
        password: $('#ts3Password').val().trim(),
        nickname: $('#ts3Nickname').val().trim(),
        serverId: parseInt($('#ts3ServerId').val().trim()),
        channelId: parseInt($('#ts3ChannelId').val().trim()),
      };

      $.ajax({
        url: `${BOT_API_URL}/bot/settings`, // Adjusted to match the route
        method: 'POST',
        headers: {
          'x-api-key': BOT_API_KEY,
          'Content-Type': 'application/json'
        },
        data: JSON.stringify(settings),
        success: function(data) {
          $('#settings-feedback').html(`<div class="alert alert-success">${data.message}</div>`);
          fetchBotStatus();
          fetchConnectedUsers();
        },
        error: function(xhr) {
          let errorMessage = 'Failed to update settings.';
          if (xhr.responseJSON && xhr.responseJSON.message) {
            errorMessage = xhr.responseJSON.message;
          } else if (xhr.responseText) {
            errorMessage = xhr.responseText;
          }
          $('#settings-feedback').html(`<div class="alert alert-danger">${errorMessage}</div>`);
        }
      });
    });

    // Handle Kick User
    $(document).on('click', '.kick-user-btn', function() {
      const userId = $(this).data('user-id');
      if (confirm(`Are you sure you want to kick user ID ${userId}?`)) {
        $.ajax({
          url: `${BOT_API_URL}/kick`,
          method: 'POST',
          headers: {
            'x-api-key': BOT_API_KEY,
            'Content-Type': 'application/json'
          },
          data: JSON.stringify({ userId }),
          success: function(data) {
            alert(data.message);
            fetchConnectedUsers(); // Refresh the list of connected users after a kick
          },
          error: function(xhr) {
            const errorMessage = xhr.responseJSON ? xhr.responseJSON.message : 'Failed to kick user.';
            alert(errorMessage);
          }
        });
      }
    });

    // Handle Ban User
    $(document).on('click', '.ban-user-btn', function() {
      const userId = $(this).data('user-id');
      if (confirm(`Are you sure you want to ban user ID ${userId}?`)) {
        $.ajax({
          url: `${BOT_API_URL}/ban`,
          method: 'POST',
          headers: {
            'x-api-key': BOT_API_KEY,
            'Content-Type': 'application/json'
          },
          data: JSON.stringify({ userId }),
          success: function(data) {
            alert(data.message);
            fetchConnectedUsers();
          },
          error: function(xhr) {
            let errorMessage = 'Failed to ban user.';
            if (xhr.responseJSON && xhr.responseJSON.message) {
              errorMessage = xhr.responseJSON.message;
            } else if (xhr.responseText) {
              errorMessage = xhr.responseText;
            }
            alert(errorMessage);
          }
        });
      }
    });

    // Get Player Info
    $('#get-player-btn').click(function() {
      const playerName = $('#player-name').val().trim();
      if (!playerName) {
        alert('Please enter a player name.');
        return;
      }

      $.ajax({
        url: `${BOT_API_URL}/player/${encodeURIComponent(playerName)}`,
        method: 'GET',
        headers: {
          'x-api-key': BOT_API_KEY
        },
        success: function(data) {
          const player = data.player;
          $('#player-details').html(`
            <p><strong>Name:</strong> ${player.name}</p>
            <p><strong>Role:</strong> ${player.role}</p>
            <p><strong>Status:</strong> ${player.status}</p>
          `);
        },
        error: function(xhr) {
          let errorMessage = 'Failed to fetch player info.';
          if (xhr.responseJSON && xhr.responseJSON.message) {
            errorMessage = xhr.responseJSON.message;
          } else if (xhr.responseText) {
            errorMessage = xhr.responseText;
          }
          $('#player-details').html(`<p style="color:red;">${errorMessage}</p>`);
        }
      });
    });
  });

  // Frontend JavaScript to kick a user
  $('#kick-btn').click(function() {
    const userId = $(this).data('user-id');
    if (confirm(`Are you sure you want to kick user ID ${userId}?`)) {
      $.ajax({
        url: '/api/kick',
        method: 'POST',
        headers: {
          'Authorization': 'Bearer your_jwt_token', // Example using JWT
          'Content-Type': 'application/json'
        },
        data: JSON.stringify({ clientId: userId, reason: 'Violation of rules.' }),
        success: function(data) {
          alert(data.message);
          fetchConnectedUsers(); // Refresh the user list
        },
        error: function(xhr) {
          let errorMessage = 'Failed to kick user.';
          if (xhr.responseJSON && xhr.responseJSON.message) {
            errorMessage = xhr.responseJSON.message;
          } else if (xhr.responseText) {
            errorMessage = xhr.responseText;
          }
          alert(`Error: ${errorMessage}`);
        }
      });
    }
  });
</script>
